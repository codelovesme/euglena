{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["\"use strict\";\r\n/**\r\n * Created by codelovesme on 6/19/2015.\r\n */\r\n/*\r\n*TODO List\r\n*\r\n* #Generate impact for particle value change\r\n* #Seperate nucleus to a organelle\r\n* #Seperate particle, request, event\r\n*\r\n*/\r\n/**\r\n * Next major version api changes\r\n * class Cytoplasm {\r\n *      constructor(particles: AnyParticle[], organelles: Organelle<any>[], chromosome: dna.AnyGene[], euglenaName?: string) {\r\n * //Get the euglenaName from particles if it is not set\r\n * \r\n */\r\nimport { sys, js } from \"cessnalib\";\r\nexport const JavascriptDate = Date;\r\nexport const JavascriptObject = Object;\r\nimport Classifiable = sys.type.Classifiable;\r\nimport Named = sys.type.Named;\r\nexport type AnyParticle = ParticleV1 | ParticleV2<any>;\r\nexport class ParticleV1 {\r\n    constructor(public meta: any, public data?: any) { }\r\n}\r\nexport class ParticleV2<T> {\r\n    constructor(public meta: MetaV2, public data?: T) { }\r\n}\r\nexport type AnyMeta = MetaV1 | MetaV2;\r\nexport type MetaV1 = any;\r\nexport class MetaV2 {\r\n    public version: string;\r\n    public createTime: number;\r\n    public expireTime?: number;\r\n    constructor(public name: string, public of: string, expireTime?: number) {\r\n        this.version = StaticTools.Particle.Versions.v2;\r\n        this.createTime = new JavascriptDate().getTime();\r\n        if (expireTime) this.expireTime = expireTime;\r\n    }\r\n}\r\nexport namespace StaticTools {\r\n    export namespace Particle {\r\n        export namespace Versions {\r\n            export const v1 = \"v1\";\r\n            export const v2 = \"v2\";\r\n        }\r\n        export function validate(particle: AnyParticle): boolean {\r\n            if (!particle || !particle.meta) return false;\r\n            switch ((particle.meta as any).version) {\r\n                case Versions.v2:\r\n                    let meta = particle.meta as MetaV2;\r\n                    return meta.name && (typeof meta.name === \"string\") && typeof meta.of &&\r\n                        (typeof meta.of === \"string\") && (meta.version === Versions.v2) && (typeof meta.createTime === \"number\");\r\n                case Versions.v1:\r\n                case \"undefined\":\r\n                    return particle.meta.name ? true : false;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport namespace interaction {\r\n    export interface CanReceiveParticle {\r\n        receive: (particle: AnyParticle, source: string, callback?: interaction.Callback) => void;\r\n    }\r\n    export interface Callback extends sys.type.Callback<AnyParticle> { }\r\n    export class Impact extends ParticleV2<{ token: string, particle: AnyParticle }> {\r\n        constructor(particle: AnyParticle, token: string, of: string) {\r\n            super(new MetaV2(\"Impact\", of), { particle, token });\r\n        }\r\n    }\r\n    export namespace constants {\r\n        export const ReceivedParticleReference = \"ReceivedParticleReference\";\r\n    }\r\n}\r\nexport namespace alive {\r\n    import Classifiable = sys.type.Classifiable;\r\n    export namespace dna {\r\n        export interface Reaction {\r\n            (particle: AnyParticle, sourceOrganelle: string, callback?: interaction.Callback): void;\r\n        }\r\n        export type AnyGene = GeneV1 | GeneV2;\r\n        export class GeneV1 extends ParticleV1 {\r\n            constructor(\r\n                name: string,\r\n                triggers: Object, // particle prop - value match\r\n                reaction: Reaction,\r\n                override?: string,\r\n                expiretime?: sys.type.Time) {\r\n                super({ expiretime, name: alive.constants.particles.Gene }, { name, triggers, reaction, override });\r\n            }\r\n        }\r\n        export interface GeneDataV2 {\r\n            name: string,\r\n            triggers: ParticleV2<GeneDataV2>,\r\n            reaction: Reaction,\r\n            override?: string,\r\n        }\r\n        export class GeneV2 extends ParticleV2<GeneDataV2> {\r\n            constructor(\r\n                name: string,\r\n                triggers: any,\r\n                reaction: Reaction,\r\n                of: string,\r\n                override?: string,\r\n                expireTime?: number) {\r\n                super(new MetaV2(constants.particles.Gene, of, expireTime), { name, triggers, reaction, override });\r\n            }\r\n        }\r\n        export class GarbageCollector {\r\n            private timeout = 1000;\r\n            private chromosome: AnyGene[] = [];\r\n            private particles: AnyParticle[] = [];\r\n            constructor(chromosome: AnyGene[], particles: AnyParticle[]) {\r\n                this.chromosome = chromosome;\r\n                this.particles = particles;\r\n            }\r\n            public start(): void {\r\n                let chromosome = this.chromosome;\r\n                let particles = this.particles;\r\n                setInterval(() => {\r\n                    //process genes\r\n                    let now = sys.type.StaticTools.Time.now();\r\n                    let nowDigit = new JavascriptDate().getTime();\r\n                    let doesExpire = (ai: AnyParticle) =>\r\n                        (!ai.meta.version || ai.meta.version === StaticTools.Particle.Versions.v1) ?\r\n                            (ai.meta.expiretime && sys.type.StaticTools.Time.biggerThan(now, ai.meta.expiretime)) :\r\n                            (ai.meta.version === StaticTools.Particle.Versions.v2 ?\r\n                                (ai.meta.expireTime && ai.meta.expireTime <= nowDigit) : false);\r\n                    let removedChromosome = sys.type.StaticTools.Array.removeAllMatched(\r\n                        this.chromosome,\r\n                        null,\r\n                        doesExpire);\r\n                    for (let gene of removedChromosome) {\r\n                        console.log(\"Cytoplasm says : destroyed gene \" + JSON.stringify(gene.meta) + \" as a result of the time expiration.\");\r\n                    }\r\n                    //process particles\r\n                    let removedParticles = sys.type.StaticTools.Array.removeAllMatched(\r\n                        this.particles,\r\n                        null, doesExpire);\r\n                    for (let gene of removedParticles) {\r\n                        console.log(\"Cytoplasm says : destroyed particle \" + JSON.stringify(gene.meta) + \" as a result of the time expiration.\");\r\n                    }\r\n                }, this.timeout)\r\n            }\r\n        }\r\n    }\r\n    export namespace particles {\r\n        export interface SapContent {\r\n            euglenaName: string\r\n        }\r\n    }\r\n    export namespace constants {\r\n        export const OutSide = \"OutSide\";\r\n        export namespace particles {\r\n            export const Gene = \"Gene\";\r\n            export const Chromosome = \"Chromosome\";\r\n        }\r\n    }\r\n    export abstract class Organelle<SapContent> implements Named {\r\n        private actions: sys.type.Map<string, (particle: AnyParticle, callback?: interaction.Callback) => void>;\r\n        public send: (particle: AnyParticle, callback?: interaction.Callback) => void;\r\n        constructor(public name: string) {\r\n            let this_ = this;\r\n            this.actions = new sys.type.Map<string, (particle: AnyParticle, callback?: interaction.Callback) => void>();\r\n            this.bindActions((particleName: string, action: (particle: AnyParticle, callback?: interaction.Callback) => void) => {\r\n                this_.actions.add(particleName, action);\r\n            });\r\n        }\r\n        protected abstract bindActions(addAction: (particleName: string, action: (particle: AnyParticle, callback?: interaction.Callback) => void) => void): void;\r\n        public receive(particle: AnyParticle, callback?: interaction.Callback): void {\r\n            let action = this.actions.get(particle.meta.name);\r\n            if (action) {\r\n                action(particle, callback);\r\n            }\r\n        }\r\n    }\r\n    export class Cytoplasm {\r\n        private static _instance: Cytoplasm = null;\r\n        private static _organelles: any = null;\r\n        private static _particles: AnyParticle[];\r\n        private static _garbageCollector: dna.GarbageCollector;\r\n        private static get _chromosome(): dna.AnyGene[] {\r\n            return Cytoplasm.getParticle({ meta: { name: alive.constants.particles.Chromosome } }).data;\r\n        }\r\n        public static get euglenaName() {\r\n            /**\r\n             * Beacuse of there can only one particle of EuglenaName in the current Cytoplasm,\r\n             * We can fetch the EuglenaName by a code like below.\r\n             */\r\n            return this.getParticle({ meta: { name: \"EuglenaName\" } }).data;\r\n        }\r\n        private static set _euglenaName(value: string) {\r\n            let particles;\r\n            let old = this.getParticle({ meta: { name: \"EuglenaName\" } });\r\n            if (old) {\r\n                particles = Cytoplasm.getParticles({ meta: { of: old.data } });\r\n            } else {\r\n                /**\r\n                 * If there is no EuglenaName exists, it has to be initial state of the euglena\r\n                 * so we have to change all particle owners to the given EuglenaName\r\n                 */\r\n                particles = Cytoplasm.getParticles({});\r\n            }\r\n            if (particles) {\r\n                for (let particle of particles) {\r\n                    particle.meta.of = value;\r\n                }\r\n            }\r\n            /**\r\n             * insert the given EuglenaName,too\r\n             */\r\n            Cytoplasm.saveParticle(new ParticleV2(new MetaV2(\"EuglenaName\", value), value));\r\n        }\r\n        constructor(particles: AnyParticle[], organelles: Organelle<any>[], chromosome: dna.AnyGene[], euglenaName?: string) {\r\n            if (Cytoplasm._instance) {\r\n                throw \"There exists a cytoplasm instance already.\";\r\n            }\r\n            Cytoplasm._particles = particles;\r\n            if (euglenaName) {\r\n                Cytoplasm._euglenaName = euglenaName;\r\n            }\r\n            Cytoplasm._particles.push(new ParticleV2(new MetaV2(alive.constants.particles.Chromosome, euglenaName), chromosome));\r\n            Cytoplasm._organelles = {};\r\n            for (let organelle of organelles) {\r\n                organelle.send = (particle, callback) => {\r\n                    Cytoplasm.receive(particle, organelle.name, callback);\r\n                };\r\n                Cytoplasm._organelles[organelle.name] = organelle;\r\n            }\r\n            Cytoplasm._instance = this;\r\n            Cytoplasm._garbageCollector = new dna.GarbageCollector(chromosome, particles);\r\n            Cytoplasm._garbageCollector.start();\r\n        }\r\n        public static receive(particle: AnyParticle, source: string, callback?: interaction.Callback) {\r\n            console.log(\"Cytoplasm says : received \" + JSON.stringify(particle.meta));\r\n            //find which genes are matched with properties of the particle \r\n            let triggerableReactions = new Array<{ index: number, triggers: string[], reaction: dna.Reaction }>();\r\n            for (var i = 0; i < Cytoplasm._chromosome.length; i++) {\r\n                let triggers: any = Cytoplasm._chromosome[i].data.triggers;\r\n                if (js.Class.doesMongoCover(particle, triggers)) {\r\n                    var reaction = Cytoplasm._chromosome[i].data.reaction;\r\n                    triggerableReactions.push({ index: i, triggers: Object.keys(triggers), reaction: reaction });\r\n                }\r\n            }\r\n            //get rid of overrided reactions\r\n            let reactions = Array<dna.Reaction>();\r\n            let names = Array<string>();\r\n            for (let tr of triggerableReactions) {\r\n                let doTrigger = true;\r\n                //Check if the tr is contained by others, if true\r\n                for (let tr2 of triggerableReactions) {\r\n                    //if it is the same object, do nothing \r\n                    if (tr.index === tr2.index) continue;\r\n                    //then if triggers of tr2 does not contain triggers of tr, do nothing\r\n                    if (!sys.type.StaticTools.Array.containsArray(tr2.triggers, tr.triggers)) continue;\r\n                    //then check if tr2 overrides tr\r\n                    doTrigger = !(Cytoplasm._chromosome[tr2.index].data.override === Cytoplasm._chromosome[tr.index].data.name);\r\n                }\r\n                if (doTrigger) {\r\n                    reactions.push(tr.reaction);\r\n                    names.push(Cytoplasm._chromosome[tr.index].data.name);\r\n                }\r\n            }\r\n            //trigger collected reactions\r\n            for (let i = 0; i < reactions.length; i++) {\r\n                let reaction = reactions[i];\r\n                //try {\r\n                console.log(`Cytoplasm says : triggering gene \"${names[i]}\"`);\r\n                reaction(particle, source, callback ? (particle: AnyParticle) => {\r\n                    console.log(\"Cytoplasm says : transmitting \" + JSON.stringify(particle.meta) + \" to \" + source);\r\n                    callback(particle);\r\n                } : callback);\r\n                //} catch (e) {\r\n                //  console.log(e);\r\n                //response(new euglena_template.being.alive.particles.Exception(new euglena.sys.type.Exception(e.message), this.name));\r\n                //}\r\n            }\r\n        }\r\n        public static transmit(organelleName: string, particle: AnyParticle, callback?: interaction.Callback) {\r\n            console.log(\"Cytoplasm says : transmitting \" + JSON.stringify(particle.meta) + \" to \" + organelleName);\r\n            let organelle: Organelle<any> = Cytoplasm._organelles[organelleName] as Organelle<any>;\r\n            organelle.receive(particle, callback ? (particle: AnyParticle) => {\r\n                console.log(\"Cytoplasm says : received \" + JSON.stringify(particle.meta));\r\n                callback(particle);\r\n            } : callback);\r\n        }\r\n        public static saveParticle(particle: AnyParticle, query?: any) {\r\n            if (query) {\r\n                let index = Cytoplasm._getParticleIndex(query);\r\n                if (index >= 0) {\r\n                    Cytoplasm._particles[index] = particle;\r\n                }\r\n            }\r\n            Cytoplasm._particles.push(particle);\r\n        }\r\n        public static removeParticles(query: any): AnyParticle[] {\r\n            return sys.type.StaticTools.Array.removeAllMatched(Cytoplasm._particles, query, (ai, t) => js.Class.doesMongoCover(ai, query));\r\n        }\r\n        public static getParticle(query: any): AnyParticle {\r\n            for (let p of Cytoplasm._particles) {\r\n                if (js.Class.doesMongoCover(p, query)) {\r\n                    return p;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        public static getParticles(query: any): AnyParticle[] {\r\n            let returnList = Array<AnyParticle>();\r\n            for (let p of Cytoplasm._particles) {\r\n                if (js.Class.doesMongoCover(p, query)) {\r\n                    returnList.push(p);\r\n                }\r\n            }\r\n            return returnList;\r\n        }\r\n        private static _getParticleIndex(query: any) {\r\n            for (let i = 0; i < Cytoplasm._particles.length; i++) {\r\n                if (js.Class.doesMongoCover(Cytoplasm._particles[i], query)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}